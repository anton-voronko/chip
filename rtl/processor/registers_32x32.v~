module registers_32x32
  (
   input       clk_i,
   input       reset_ni,
   input       write_enable_i,
   input [4:0] register_addr_a_i,
   input [4:0] register_addr_b_i,
   input [4:0] register_write_i,
   input [31:0] write_data_i,

   output [31:0] read_data_a_o,
   output [31:0] read_data_b_o
   );

   integer 	 i;

   wire [4:0] 	 enable_data_w;
      
   reg 		 enable_register_v [1:31];
   reg [31:0] 	 register [1:31];
   
   assign enable_data_w = register_write_i & {5{write_enable_i}};
      
   always @(*)
     begin
	for(i=1;i<32;i=i+1)
	  begin
	     enable_register_v[i] = 1'b0;
	  end
	for(i=1;i<32;i=i+1)
	  begin
	     if (enable_data_w == i) enable_register_v[i] = 1'b1;
	  end 
     end 

   always @(posedge clk_i or negedge reset_ni)
     begin
	if (!reset_ni)
	  for(i=1;i<32;i=i+1)
	    begin
	       register[i] <= 32'b0;
	    end
	else
	  for(i=1;i<32;i=i+1)
	    begin
	       if (enable_register_v[i])
		 begin
		    register[i] <= write_data_i;
		 end
	    end 
     end 

   reg [31:0] decoded_read_a_data_v;
   reg [31:0] decoded_read_b_data_v;
   
   always @(*)
     begin
	decoded_read_a_data_v = 32'b0;
        decoded_read_b_data_v = 32'b0;
	for(i=1;i<32;i=i+1)
	  begin
	     if (register_addr_a_i == i) decoded_read_a_data_v = register[i];
	     if (register_addr_b_i == i) decoded_read_b_data_v = register[i];
	  end 
     end

   assign read_data_a_o = decoded_read_a_data_v;
   assign read_data_b_o = decoded_read_b_data_v;
   
endmodule 

